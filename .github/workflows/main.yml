name: GITHUB-CICD
on: [push]
env:
   ARTIFACTORY_URL: http://10.53.105.21:8082/
   ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
   ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
   IMAGE_NAME: pavan9999/github-actions
   IMAGE_TAG: petclinic
   AWS_REGION: us-east-1
   ECS_CLUSTER: ecs-cluster
   ECS_SERVICE: svc
   ECS_TASK_DEFINITION: taskdefinition
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: "17"
          distribution: adopt
          cache: maven
      - name: Maven Build 
        run: mvn clean package
      # Generate artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: petclinic
          path: ./target/*.war
  Sonar:
    runs-on: ubuntu-latest
    steps:
      # SOnarQube Code Scan and analysis
      - uses: actions/checkout@v2
      - name: SonarQube-Scan Stage
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # SOnarQube Code Quality 
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SCA:
    runs-on: ubuntu-latest
    steps:
      # OWASP Dependency Check(SCA)
      - uses: actions/checkout@v2
      - name: Run dependency check
        run: mvn org.owasp:dependency-check-maven:check
      
      # Upload Dependency check report
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: ./target/dependency-check-report.html
  Junit:
    runs-on: ubuntu-latest
    steps:
      # Junit Testing
      - uses: actions/checkout@v2
      - name: Build and Test
        run: mvn test
      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v2
        with:
         name: junit-reports
         path: ./target/surefire-reports/*
  CodeCoverage:
    runs-on: ubuntu-latest
    steps:
      # Code Coverage
      - uses: actions/checkout@v2
      - name: Generate JaCoCo report
        run: mvn clean test jacoco:report
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v2
        with:
         name: codecoverage-jacoco-report
         path: ./target/site/jacoco/index.html 
  Docker-Image:
    runs-on: ubuntu-latest
    steps:
      # Build before creating docker image
      - uses: actions/checkout@v2
      - name: Build before create image
        run: mvn clean package
      # Build Docker image and Push into Docker Hub 
      - name: Docker-Image-Build & Push
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: ${IMAGE_NAME}
          tags: ${IMAGE_TAG}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  Image-Scan:
    runs-on: ubuntu-latest
    steps:
      # Docker Image Scan Trivy Tool installing
      - name: Install Trivy 
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      # Docker Image Scanning
      - name: Scan Docker Image
        run: |
           trivy image ${IMAGE_NAME}:${IMAGE_TAG} > image-scan-report.html
           # trivy --no-progress --exit-code 0 --severity HIGH,CRITICAL --auto-refresh $IMAGE_NAME:$IMAGE_TAG
      - name: Upload scan results
        uses: actions/upload-artifact@v2
        with:
           name: trivy-scan-results
           path: ./*.html
 
