name: GITHUB-CICD
on: [push]
env:
   ARTIFACTORY_URL: http://10.53.105.21:8082/
   ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
   ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
   IMAGE_NAME: pavan9999/github-actions
   IMAGE_TAG: moonpage
   AWS_REGION: us-east-1
   ECS_CLUSTER: ecs-cluster
   ECS_SERVICE: service
   ECS_TASK_DEFINITION: task
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: "17"
          distribution: adopt
          cache: maven
      - name: Maven Build 
        run: mvn clean package
      # upload artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: MoonPageApp
          path: ./target/*.war
      # SOnarQube Code Scan and analysis
      - name: SonarQube-Scan Stage
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # SOnarQube Code Quality 
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # OWASP Dependency Check(SCA)
      - name: Run dependency check
        run: mvn org.owasp:dependency-check-maven:check
      
      # Upload Dependency check report
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: ./target/dependency-check-report.html
      # Junit Testing
      - name: Build and Test
        run: mvn test
      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v2
        with:
         name: junit-reports
         path: ./target/surefire-reports/*
      # Code Coverage
      - name: Generate JaCoCo report
        run: mvn clean test jacoco:report
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v2
        with:
         name: codecoverage-jacoco-report
         path: ./target/site/jacoco/index.html 
      # Build before creating docker image
      - name: Build before create image
        run: mvn clean package
      # Build Docker image and Push into Docker Hub 
      - name: Docker-Image-Build & Push
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: ${IMAGE_NAME}
          tags: ${IMAGE_TAG}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Docker Image Scan Trivy Tool installing
      - name: Install Trivy 
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      # Docker Image Scanning
      - name: Scan Docker Image
        run: |
           trivy image ${IMAGE_NAME}:${IMAGE_TAG} > image-scan-report.html
           # trivy --no-progress --exit-code 0 --severity HIGH,CRITICAL --auto-refresh $IMAGE_NAME:$IMAGE_TAG
      - name: Upload scan results
        uses: actions/upload-artifact@v2
        with:
           name: trivy-scan-results
           path: ./*.html
  Deploy_QA_Environment:
    #needs: Build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      - name: Build JAR
        run: mvn clean package
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-app
          path: ./target/*.jar 
  Selenium-test:
     #needs: Build
     runs-on: ubuntu-latest
     steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: build artifacts
        run: mvn clean package
      - name:  Install Google Chrome # Using shell script to install Google Chrome
        run: |
           chmod +x ./SeleniumGridExecution/scripts/InstallChrome.sh
           ./SeleniumGridExecution/scripts/InstallChrome.sh 
      - name: Build with Maven
        run: |
           cd SeleniumGridExecution
           mvn test
      - name: upload all test files
        uses: actions/upload-artifact@v2
        with:
         name: selenium-test-results
         path: ./SeleniumGridExecution/target/surefire-reports/Suite/*
  #Deployment in Staging Environment
  Deploy_Staging_Environment:
    #needs: Selenium-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{env.ECS_SERVICE}} --task-definition ${{ env.ECS_TASK_DEFINITION }}
 
 #Jmeter Testing for load and performance 
  Performance_Testing:
    #needs: Deploy_Staging_Environment 
    runs-on: ubuntu-latest
    steps:
     - name: Checkout code
       uses: actions/checkout@v2
     - name: Setup Java
       uses: actions/setup-java@v1
       with:
          java-version: 11
     - name: Download and extract JMeter
       run: |
         curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.5.zip -o jmeter.zip
         unzip jmeter.zip

     - name: Run JMeter test
       run: |
         ./apache-jmeter-5.5/bin/jmeter -n -t test.jmx -l result.jtl

     - name: Upload test results    
       uses: actions/upload-artifact@v2
       with:
          name: jmeter-test-results
          path: ./target/*.jtl
    
